{"ast":null,"code":"var _jsxFileName = \"/home/levantsi/FullstackOpen/fullstack-open-2020Simo/part2/phrases/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  useEffect(() => {\n    noteService.getAll().then(response => {\n      setNotes(response.data);\n    });\n    /*axios\n    .get('http://localhost:3001/notes')\n    .then(response => {\n      console.log('promise fulfilled')\n      setNotes(response.data)\n    }) */\n  }, []);\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    };\n    axios.post('http://localhost:3001/notes', noteObject).then(response => {});\n    setNotes(notes.concat(noteObject));\n    setNewNote('');\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const toggleImportanceOf = id => {\n    console.log(`importance of ${id} needs to be toggled`);\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    axios.put(url, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data));\n      console.log(response.data);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Notes\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"show \", showAll ? 'important' : 'all')), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, notesToShow.map(note => /*#__PURE__*/React.createElement(Note, {\n    key: note.id,\n    note: note,\n    toggleImportance: () => toggleImportanceOf(note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \" save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/levantsi/FullstackOpen/fullstack-open-2020Simo/part2/phrases/src/App.js"],"names":["React","useState","useEffect","axios","Note","noteService","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","getAll","then","response","data","handleNoteChange","event","target","value","addNote","preventDefault","noteObject","content","date","Date","toISOString","important","Math","random","post","concat","notesToShow","filter","note","toggleImportanceOf","id","console","log","url","find","n","changedNote","put","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,WAAW,CACRQ,MADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBP,MAAAA,QAAQ,CAACO,QAAQ,CAACC,IAAV,CAAR;AACD,KAJH;AAMA;;;;;;AAOD,GAdQ,EAcP,EAdO,CAAT;;AAiBA,QAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClCR,IAAAA,UAAU,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD,GAFD;;AAIA,QAAMC,OAAO,GAAIH,KAAD,IAAW;AACzBA,IAAAA,KAAK,CAACI,cAAN;AACA,UAAMC,UAAU,GAAG;AACjBC,MAAAA,OAAO,EAAEf,OADQ;AAEjBgB,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFW;AAGjBC,MAAAA,SAAS,EAAEC,IAAI,CAACC,MAAL,KAAgB;AAHV,KAAnB;AAMA3B,IAAAA,KAAK,CACF4B,IADH,CACQ,6BADR,EACuCR,UADvC,EAEGT,IAFH,CAEQC,QAAQ,IAAI,CACjB,CAHH;AAKAP,IAAAA,QAAQ,CAACD,KAAK,CAACyB,MAAN,CAAaT,UAAb,CAAD,CAAR;AACAb,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAfD;;AAiBA,QAAMuB,WAAW,GAAGtB,OAAO,GACvBJ,KADuB,GAEvBA,KAAK,CAAC2B,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACP,SAA1B,CAFJ;;AAIA,QAAMQ,kBAAkB,GAAIC,EAAD,IAAQ;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBF,EAAG,sBAAhC;AAEA,UAAMG,GAAG,GAAI,+BAA8BH,EAAG,EAA9C;AACA,UAAMF,IAAI,GAAG5B,KAAK,CAACkC,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAAzB,CAAb;AACA,UAAMM,WAAW,GAAG,EAAC,GAAGR,IAAJ;AAAUP,MAAAA,SAAS,EAAE,CAACO,IAAI,CAACP;AAA3B,KAApB;AAEAzB,IAAAA,KAAK,CACFyC,GADH,CACOJ,GADP,EACYG,WADZ,EAEG7B,IAFH,CAEQC,QAAQ,IAAI;AAChBP,MAAAA,QAAQ,CAACD,KAAK,CAACsC,GAAN,CAAUV,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYA,EAAZ,GAAiBF,IAAjB,GAAwBpB,QAAQ,CAACC,IAAnD,CAAD,CAAR;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAQ,CAACC,IAArB;AAED,KANH;AAUD,GAjBD;;AAkBI,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAE,MAAMJ,UAAU,CAAC,CAACD,OAAF,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACQA,OAAO,GAAG,WAAH,GAAgB,KAD/B,CADF,CAFF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsB,WAAW,CAACY,GAAZ,CAAgBV,IAAI,iBACnB,oBAAC,IAAD;AACA,IAAA,GAAG,EAAEA,IAAI,CAACE,EADV;AAEA,IAAA,IAAI,EAAIF,IAFR;AAGA,IAAA,gBAAgB,EAAI,MAAMC,kBAAkB,CAACD,IAAI,CAACE,EAAN,CAH5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CARF,eAgBE;AAAM,IAAA,QAAQ,EAAIhB,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAIZ,OADX;AAEE,IAAA,QAAQ,EAAEQ,gBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE;AAAQ,IAAA,IAAI,EAAG,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,CAhBF,CADF;AA0BD,CA3FH;;AA6FE,eAAeX,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\nconst [notes, setNotes] = useState([])\nconst [newNote, setNewNote] = useState('')\nconst [showAll, setShowAll] = useState(true)\n\nuseEffect(() => {\n  noteService\n    .getAll()\n    .then(response => {\n      setNotes(response.data)\n    })\n  \n  /*axios\n  .get('http://localhost:3001/notes')\n  .then(response => {\n    console.log('promise fulfilled')\n    setNotes(response.data)\n  }) */\n\n},[])\n\n\nconst handleNoteChange = (event) => {\n  setNewNote(event.target.value)\n}\n\nconst addNote = (event) => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() > 0.5,\n  }\n\n  axios\n    .post('http://localhost:3001/notes', noteObject)\n    .then(response => {\n    })\n\n  setNotes(notes.concat(noteObject))\n  setNewNote('')\n}\n\nconst notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\nconst toggleImportanceOf = (id) => {\n  console.log(`importance of ${id} needs to be toggled`)\n\n  const url = `http://localhost:3001/notes/${id}`\n  const note = notes.find(n => n.id === id)\n  const changedNote = {...note, important: !note.important}\n\n  axios\n    .put(url, changedNote)\n    .then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data))\n      console.log(response.data)\n   \n    })\n\n    \n  \n}\n    return (\n      <div>\n        <h1>Notes</h1>\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important': 'all'}\n          </button>\n        </div>\n        \n        <ul>\n          {notesToShow.map(note => \n            <Note \n            key={note.id} \n            note = {note}\n            toggleImportance = {() => toggleImportanceOf(note.id)} />\n          )}\n        </ul>\n        <form onSubmit = {addNote}>\n          <input \n            value = {newNote}\n            onChange={handleNoteChange}\n            />\n          <button type = \"submit\"> save</button>\n        </form>\n      </div>\n    )\n  }\n\n  export default App\n  "]},"metadata":{},"sourceType":"module"}